token num: 178
[TK_KEYWORD, DEF_FUNCTION] function
[TK_IDENT, NOTHING] main
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_KEYWORD, DEF_VOID] void
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_OPERATOR, RETURN_TYPE] ->
[TK_KEYWORD, DEF_VOID] void
[TK_PUNCTUATOR, LEFT_BRACKET] {
[TK_KEYWORD, DEF_INT32] int32
[TK_IDENT, NOTHING] a
[TK_PUNCTUATOR, COMMA] ,
[TK_IDENT, NOTHING] b
[TK_PUNCTUATOR, COMMA] ,
[TK_IDENT, NOTHING] c
[TK_PUNCTUATOR, COMMA] ,
[TK_IDENT, NOTHING] d
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_KEYWORD, DEF_STRING] string
[TK_IDENT, NOTHING] x
[TK_PUNCTUATOR, COMMA] ,
[TK_IDENT, NOTHING] y
[TK_PUNCTUATOR, COMMA] ,
[TK_IDENT, NOTHING] z
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] a
[TK_OPERATOR, EQUAL] =
[TK_NUM, NOTHING] 32
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] b
[TK_OPERATOR, EQUAL] =
[TK_NUM, NOTHING] 16
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] c
[TK_OPERATOR, EQUAL] =
[TK_IDENT, NOTHING] b
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] a
[TK_OPERATOR, EQUAL] =
[TK_IDENT, NOTHING] a
[TK_OPERATOR, TIMES] *
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_IDENT, NOTHING] b
[TK_OPERATOR, PLUS] +
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_IDENT, NOTHING] c
[TK_OPERATOR, MINUS] -
[TK_IDENT, NOTHING] a
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_OPERATOR, PLUS] +
[TK_IDENT, NOTHING] b
[TK_OPERATOR, MINUS] -
[TK_NUM, NOTHING] 1
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] d
[TK_OPERATOR, EQUAL] =
[TK_IDENT, NOTHING] a
[TK_OPERATOR, MOD] MOD
[TK_NUM, NOTHING] 3
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] print
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_IDENT, NOTHING] a
[TK_PUNCTUATOR, COMMA] ,
[TK_STRING, NOTHING]  mod 3 = 
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_KEYWORD, IF] if
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_OPERATOR, NOT] NOT
[TK_IDENT, NOTHING] d
[TK_OPERATOR, AND] AND
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_KEYWORD, TRUE] TRUE
[TK_OPERATOR, OR] OR
[TK_KEYWORD, FALSE] FALSE
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_OPERATOR, AND] AND
[TK_NUM, NOTHING] 0
[TK_OPERATOR, LEFT_ANGLE_BRACKET] <
[TK_IDENT, NOTHING] d
[TK_OPERATOR, PLUS] +
[TK_NUM, NOTHING] 2
[TK_OPERATOR, CMP_EQUAL] ==
[TK_NUM, NOTHING] 2
[TK_OPERATOR, LARGER_EQUAL] >=
[TK_NUM, NOTHING] 1
[TK_OPERATOR, OR] OR
[TK_NUM, NOTHING] 1
[TK_OPERATOR, RIGHT_ANGLE_BRACKET] >
[TK_NUM, NOTHING] 2
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, LEFT_BRACKET] {
[TK_IDENT, NOTHING] println
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_STRING, NOTHING] 0
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_PUNCTUATOR, RIGHT_BRACKET] }
[TK_KEYWORD, ELSE] else
[TK_KEYWORD, IF] if
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_IDENT, NOTHING] d
[TK_OPERATOR, CMP_EQUAL] ==
[TK_NUM, NOTHING] 1
[TK_OPERATOR, AND] AND
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_IDENT, NOTHING] a
[TK_OPERATOR, CMP_EQUAL] ==
[TK_IDENT, NOTHING] a
[TK_OPERATOR, OR] OR
[TK_NUM, NOTHING] 1
[TK_OPERATOR, CMP_NOT_EQUAL] !=
[TK_NUM, NOTHING] 0
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, LEFT_BRACKET] {
[TK_IDENT, NOTHING] println
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_STRING, NOTHING] 1
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_PUNCTUATOR, RIGHT_BRACKET] }
[TK_KEYWORD, ELSE] else
[TK_PUNCTUATOR, LEFT_BRACKET] {
[TK_IDENT, NOTHING] println
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_STRING, NOTHING] 2
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_PUNCTUATOR, RIGHT_BRACKET] }
[TK_IDENT, NOTHING] x
[TK_OPERATOR, EQUAL] =
[TK_STRING, NOTHING] abc
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] y
[TK_OPERATOR, EQUAL] =
[TK_STRING, NOTHING] xyz
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] z
[TK_OPERATOR, EQUAL] =
[TK_IDENT, NOTHING] x
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] print
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_IDENT, NOTHING] a
[TK_PUNCTUATOR, COMMA] ,
[TK_STRING, NOTHING] +
[TK_PUNCTUATOR, COMMA] ,
[TK_IDENT, NOTHING] b
[TK_PUNCTUATOR, COMMA] ,
[TK_STRING, NOTHING] =
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] println
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_IDENT, NOTHING] a
[TK_OPERATOR, PLUS] +
[TK_IDENT, NOTHING] b
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] println
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_IDENT, NOTHING] x
[TK_OPERATOR, PLUS] +
[TK_IDENT, NOTHING] z
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] println
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_IDENT, NOTHING] y
[TK_PUNCTUATOR, COMMA] ,
[TK_IDENT, NOTHING] c
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_KEYWORD, DEF_RETURN] return
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_PUNCTUATOR, RIGHT_BRACKET] }
