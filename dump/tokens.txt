token num: 57
[TK_KEYWORD, DEF_FUNCTION] function
[TK_IDENT, NOTHING] main
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_KEYWORD, DEF_VOID] void
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_OPERATOR, RETURN_TYPE] ->
[TK_KEYWORD, DEF_VOID] void
[TK_PUNCTUATOR, LEFT_BRACKET] {
[TK_KEYWORD, DEF_INT32] int32
[TK_IDENT, NOTHING] i
[TK_PUNCTUATOR, COMMA] ,
[TK_IDENT, NOTHING] j
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] i
[TK_OPERATOR, EQUAL] =
[TK_NUM, NOTHING] -100
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_IDENT, NOTHING] j
[TK_OPERATOR, EQUAL] =
[TK_NUM, NOTHING] 100
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_KEYWORD, WHILE] while
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_IDENT, NOTHING] i
[TK_OPERATOR, LEFT_ANGLE_BRACKET] <
[TK_IDENT, NOTHING] j
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, LEFT_BRACKET] {
[TK_KEYWORD, IF] if
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_IDENT, NOTHING] i
[TK_OPERATOR, DIVISION] /
[TK_NUM, NOTHING] 10
[TK_OPERATOR, RIGHT_ANGLE_BRACKET] >
[TK_NUM, NOTHING] 0
[TK_OPERATOR, AND] AND
[TK_IDENT, NOTHING] i
[TK_OPERATOR, MOD] MOD
[TK_NUM, NOTHING] 10
[TK_OPERATOR, CMP_EQUAL] ==
[TK_NUM, NOTHING] 0
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, LEFT_BRACKET] {
[TK_IDENT, NOTHING] println
[TK_PUNCTUATOR, LEFT_PARENTHESE] (
[TK_IDENT, NOTHING] i
[TK_PUNCTUATOR, RIGHT_PARENTHESE] )
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_PUNCTUATOR, RIGHT_BRACKET] }
[TK_IDENT, NOTHING] i
[TK_OPERATOR, EQUAL] =
[TK_IDENT, NOTHING] i
[TK_OPERATOR, PLUS] +
[TK_NUM, NOTHING] 1
[TK_PUNCTUATOR, SEMICOLON] ;
[TK_PUNCTUATOR, RIGHT_BRACKET] }
[TK_PUNCTUATOR, RIGHT_BRACKET] }
